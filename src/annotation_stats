#!/usr/bin/env python
'''
Outputs some statistics on annotated contigs
'''

__author__ = "Marco Galardini"
__version__ = '0.1.0'

def get_options():
    import argparse
    import sys

    import numpy as np

    # create the top-level parser
    description = "Output some statistics from a Prokka directory"
    parser = argparse.ArgumentParser(description = description,
                                     prog = 'annotation_stats')

    parser.add_argument('gbk', action='store',
                        help='Annotated GenBank file')
    parser.add_argument('strain', action='store',
                        help='Strain ID')
    
    parser.add_argument('--sequencing', action='store',
                        dest='sequencing',
                        type=int,
                        default=np.nan,
                        help='Sequencing length')

    parser.add_argument('--version', action='version',
                         version='%(prog)s '+__version__)

    return parser.parse_args()

def N50(numlist):
    """
    Abstract: Returns the N50 value of the passed list of numbers.
    Usage:    N50(numlist)

    Based on the Broad Institute definition:
    https://www.broad.harvard.edu/crd/wiki/index.php/N50
    """
    numlist.sort()
    newlist = []
    for x in numlist :
        newlist += [x]*x
        # take the mean of the two middle elements af there are an even number
        # of elements.  otherwise, take the middle element
    if len(newlist) % 2 == 0:
        medianpos = int(len(newlist)/2)
        return float(newlist[medianpos] + newlist[medianpos-1]) /2
    else:
        medianpos = int(len(newlist)/2)
        return newlist[medianpos]

if __name__ == "__main__":
    options = get_options()

    import sys

    import numpy as np

    from Bio import SeqIO
    from Bio.SeqUtils import GC

    print('\t'.join(['ID', 'Reads length',
                     'Coverage',
                     'Contigs',
                     'Length',
                     'Largest contig',
                     'N50',
                     'GC',
                     'Ns',
                     'Proteins',
                     'rRNA',
                     'tRNA',
                     'misc_RNA']))

    seqs = {s for s in SeqIO.parse(options.gbk, 'genbank')}

    s1 = None
    for s in seqs:
        if s1 is None:
            s1 = s
        else:
            s1 += s

    if np.isnan(options.sequencing):
        coverage = np.nan
    else:
        coverage = float(options.sequencing)/sum([len(s) for s in seqs])

    cds = 0
    tRNA = 0
    rRNA = 0
    misc_RNA = 0
    for s in seqs:
        cds += len(list(filter(lambda x: x.type == 'CDS',
                              s.features)))
        tRNA += len(list(filter(lambda x: x.type == 'tRNA',
                              s.features)))
        rRNA += len(list(filter(lambda x: x.type == 'rRNA',
                              s.features)))
        misc_RNA += len(list(filter(lambda x: x.type == 'misc_RNA',
                              s.features)))

    print('\t'.join([str(x) for x in [options.strain,
                    options.sequencing,
                    coverage,
                    len(seqs),
                    len(s1),
                    max({len(s) for s in seqs}),
                    N50([len(s) for s in seqs]),
                    GC(s1.seq),
                    s1.seq.count('N'),
                    cds, rRNA, tRNA, misc_RNA]]))
    
